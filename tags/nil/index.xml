<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nil on J3RN's Blog</title><link>https://j3rn.com/tags/nil/</link><description>Recent content in Nil on J3RN's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 13 Dec 2020 20:46:00 -0500</lastBuildDate><atom:link href="https://j3rn.com/tags/nil/index.xml" rel="self" type="application/rss+xml"/><item><title>The Harmful Duality of Elixir's nil</title><link>https://j3rn.com/posts/harmful-duality-of-elixirs-nil/</link><pubDate>Sun, 13 Dec 2020 20:46:00 -0500</pubDate><guid>https://j3rn.com/posts/harmful-duality-of-elixirs-nil/</guid><description>&lt;h3 id="the-problem" class="relative group">The Problem &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#the-problem" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>Have you ever written code like this?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#c1abea">get_address&lt;/span>(&lt;span style="color:#c1abea">address_id&lt;/span>) &lt;span style="color:#c678dd">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#76a9f9">Addresses&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#c1abea">get&lt;/span>(&lt;span style="color:#c1abea">address_id&lt;/span>) &lt;span style="color:#c678dd">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> {&lt;span style="color:#56b6c2">:error&lt;/span>, &lt;span style="color:#56b6c2">:address_not_found&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">val&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> {&lt;span style="color:#56b6c2">:ok&lt;/span>, &lt;span style="color:#c1abea">val&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have. This pattern is commonly used to make the value that &lt;a href="https://hexdocs.pm/ecto/Ecto.Repo.html#c:get/3" target="_blank" rel="noreferrer">Ecto.Repo.get/3&lt;/a> returns (a struct or &lt;code>nil&lt;/code>) play well with Elixir&amp;rsquo;s &lt;a href="https://hexdocs.pm/elixir/Kernel.SpecialForms.html#with/1" target="_blank" rel="noreferrer">&lt;code>with&lt;/code>&lt;/a> construct. Since &lt;code>Ecto.Repo.get/3&lt;/code> will always return some single value, a &lt;code>nil&lt;/code> check is required to determine whether that value indicates a success or a failure. Doing this check inline is somewhat clumsy:&lt;/p></description></item></channel></rss>