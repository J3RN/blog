<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>software development on J3RN's Blog</title><link>http://j3rn.com/tags/software-development/</link><description>Recent content in software development on J3RN's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 11 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://j3rn.com/tags/software-development/index.xml" rel="self" type="application/rss+xml"/><item><title>The Four Part Migration</title><link>http://j3rn.com/posts/the-four-part-migration/</link><pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate><guid>http://j3rn.com/posts/the-four-part-migration/</guid><description>If you&amp;rsquo;ve been writing relational database-backed applications for long enough, you&amp;rsquo;ve needed this. The situation is common enough: You have a some kind of web application, you don&amp;rsquo;t want to have any downtime, and you need to make a breaking change to your schema.
Breaking changes come in several forms: renaming a column, changing its type, or even just changing the format in which you store data (e.g. normalizing phone numbers), etc.</description></item><item><title>Readability vs Comprehensibility</title><link>http://j3rn.com/posts/readability-vs-comprehensibility/</link><pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate><guid>http://j3rn.com/posts/readability-vs-comprehensibility/</guid><description>For me, clarity is composed of two smaller ideas: readability and comprehensibility. Neither of these words have widely-accepted definitions in software engineering, so for the purposes of this article, I will define them like so:
readability ability for a reader to recognize the syntactic constructs in a body of code. comprehensibility ability for a reader to discern the what a body of code does at a high level. Readability #The LISP family of programming languages have reached the pinnacle of readability.</description></item><item><title>Focusing on What Matters</title><link>http://j3rn.com/posts/focusing-on-what-matters/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>http://j3rn.com/posts/focusing-on-what-matters/</guid><description>In an introductory computer science course, our professor instructed us:
Don&amp;rsquo;t become attached to any IDE, text editor, programming language, or operating system. This field is young and constantly evolving; you don&amp;rsquo;t want to be left behind.
I don&amp;rsquo;t think I realized at that time what tremendously insightful advice this was. At that time I was primarily writing Java in Eclipse. Over the next few years I would work professionally in PHP and Ruby and then migrate to Elixir.</description></item><item><title>The Agile Myth</title><link>http://j3rn.com/posts/the-agile-myth/</link><pubDate>Sat, 06 Mar 2021 15:10:00 -0500</pubDate><guid>http://j3rn.com/posts/the-agile-myth/</guid><description>Writing a criticism of Agile after the word &amp;ldquo;Agile&amp;rdquo; has been pronounced dead by one of its authors may seem like overkill, but nothing has put a stop to the software industry&amp;rsquo;s glut of Agile certifications , occupations of &amp;ldquo;doing Agile&amp;rdquo; , and every engineering manager I&amp;rsquo;ve ever spoken to saying &amp;ldquo;Oh, yes, we do Agile here.&amp;rdquo; I could write an entire blog post haranguing the profiteering and narcissistic industry (see Dave Thomas&amp;rsquo; post linked above), but today I want to dive deeper, take a hard look at the original document, and ask &amp;ldquo;Who actually does this?</description></item></channel></rss>