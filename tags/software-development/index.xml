<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Development on J3RN's Blog</title><link>https://j3rn.com/tags/software-development/</link><description>Recent content in Software Development on J3RN's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 13 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://j3rn.com/tags/software-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Object Orientation and the Limits of Metaphor</title><link>https://j3rn.com/posts/object-orientation-limits-of-metaphor/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://j3rn.com/posts/object-orientation-limits-of-metaphor/</guid><description>&lt;p>Roughly ten years ago, I was very excited about object orientation. Which made me somewhat late to the party; glowing pronouncements of how object orientation was going to solve the software complexity crisis had flooded industry publications some two decades prior. Regardless, in 2014, I was trying to explain to a friend why objects were so grand.&lt;/p>
&lt;p>&amp;ldquo;Objects model the real world,&amp;rdquo; I said, grabbing a pencil off the table and holding it up. &amp;ldquo;For instance, I could create a Pencil class, representing the Platonic idea of Pencil, and this would be an instance of it.&amp;rdquo; I, like any modern person, did not actually subscribe to Platonism. &amp;ldquo;And it&amp;rsquo;s able to &lt;em>do&lt;/em> stuff, which we refer to as &amp;lsquo;methods&amp;rsquo;. For instance,&amp;rdquo; I said, scribbling on a piece of paper, &amp;ldquo;it might have a &amp;lsquo;write&amp;rsquo; method, for writing things.&amp;rdquo;&lt;/p></description></item><item><title>Revealing Reveal</title><link>https://j3rn.com/posts/revealing-reveal/</link><pubDate>Sun, 17 Nov 2024 00:00:00 +0000</pubDate><guid>https://j3rn.com/posts/revealing-reveal/</guid><description>&lt;p>&lt;strong>Disclaimer: A limitation of the work that I&amp;rsquo;m describing in this post is that it may only be useful to sighted persons and is enhanced by being not colorblind. This post discusses a tool that displays code within colored boxes. The current implementation provides titles on the boxes which might be of use to those without (color) vision, but I have not verified it with a screen reader. I will strive in my future work to create tools that are of use to the (color)blind community.&lt;/strong>&lt;/p></description></item><item><title>Let it Crash?</title><link>https://j3rn.com/posts/let-it-crash/</link><pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate><guid>https://j3rn.com/posts/let-it-crash/</guid><description>&lt;p>






 
 
&lt;figure>&lt;img src="https://j3rn.com/images/titanic.webp" alt="The oceanliner Titanic sinking in the North Atlantic" class="mx-auto my-0 rounded-md" />
&lt;/figure>
&lt;/p>
&lt;p>In the BEAM ecosystem (&lt;a href="https://erlang.org" target="_blank" rel="noreferrer">Erlang&lt;/a>, &lt;a href="https://elixir-lang.org" target="_blank" rel="noreferrer">Elixir&lt;/a>, &lt;a href="https://gleam.run" target="_blank" rel="noreferrer">Gleam&lt;/a>, etc), there&amp;rsquo;s a common idiom:&lt;/p>
&lt;h2 id="let-it-crash" class="relative group">Let It Crash &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#let-it-crash" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>And your first reaction to this is probably astonishment, because crashing is, generally-speaking, not ideal. In traditional, single-threaded systems, a crash means that your program dies and—in server settings—it&amp;rsquo;s then the responsibility of some other service (SystemD or Kubernetes or whatever) to notice that your program has died and restart it. In the event that this process was non-redundant (which is, itself, bad), this may result in downtime. However, in BEAM languages this is usually not the case; business logic is typically executed by BEAM worker processes&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> which are isolated from all other BEAM processes. If one BEAM process crashes, all the other processes keep going&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. Furthermore, these processes are usually &amp;ldquo;supervised&amp;rdquo; by a &lt;a href="https://www.erlang.org/doc/man/supervisor" target="_blank" rel="noreferrer">Supervisor&lt;/a> which will detect the crash and start a replacement process, if necessary.&lt;/p></description></item><item><title>The Four Part Migration</title><link>https://j3rn.com/posts/the-four-part-migration/</link><pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate><guid>https://j3rn.com/posts/the-four-part-migration/</guid><description>&lt;p>If you&amp;rsquo;ve been writing relational database-backed applications for long enough, you&amp;rsquo;ve needed this. The situation is common enough: You have a some kind of web application, you don&amp;rsquo;t want to have any downtime, and you need to make a breaking change to your schema.&lt;/p>
&lt;p>Breaking changes come in several forms: renaming a column, changing its type, or even just changing the format in which you store data (e.g. normalizing phone numbers), etc. What these cases have in common is that once the change is made, the code that relied on the way that things were will no longer function. For instance, when a column is renamed, code that&amp;rsquo;s looking for the data under the old name won&amp;rsquo;t work. Code looking for data under the &lt;em>new&lt;/em> name won&amp;rsquo;t function either until the rename is complete.&lt;/p></description></item><item><title>Readability vs Comprehensibility</title><link>https://j3rn.com/posts/readability-vs-comprehensibility/</link><pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate><guid>https://j3rn.com/posts/readability-vs-comprehensibility/</guid><description>&lt;p>For me, clarity is composed of two smaller ideas: &lt;em>readability&lt;/em> and &lt;em>comprehensibility&lt;/em>. Neither of these words have widely-accepted definitions in software engineering, so for the purposes of this article, I will define them like so:&lt;/p>
&lt;dl>
&lt;dt>readability&lt;/dt>
&lt;dd>ability for a reader to recognize the syntactic constructs in a body of code.&lt;/dd>
&lt;dt>comprehensibility&lt;/dt>
&lt;dd>ability for a reader to discern the what a body of code does at a high level.&lt;/dd>
&lt;/dl>
&lt;h2 id="readability" class="relative group">Readability &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#readability" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>The LISP family of programming languages have reached the pinnacle of &lt;em>readability&lt;/em>.&lt;/p></description></item><item><title>Focusing on What Matters</title><link>https://j3rn.com/posts/focusing-on-what-matters/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://j3rn.com/posts/focusing-on-what-matters/</guid><description>&lt;p>Update 2025-07-12: I merged two sections, Stability and Availability, into one section, Usability, that also encompasses topics such as accessibility. I also updated some paragraph structures and removed the intro because it was weak.&lt;/p>
&lt;h1 id="what-matters" class="relative group">What matters? &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#what-matters" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;p>The reason that we write software in the first place is to create solutions to problems&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Around the world, every day people face problems that can be solved by computers. A person might want to know &amp;ldquo;What are the chances it will rain tomorrow?&amp;rdquo; A statistical model can provide a reasonable estimate. A person might want to know &amp;ldquo;If I have a loan at 3%, how much will I pay in interest over the term of the loan?&amp;rdquo; Accounting software can answer this question.&lt;/p></description></item><item><title>The Agile Myth</title><link>https://j3rn.com/posts/the-agile-myth/</link><pubDate>Sat, 06 Mar 2021 15:10:00 -0500</pubDate><guid>https://j3rn.com/posts/the-agile-myth/</guid><description>&lt;p>Writing a criticism of Agile after &lt;a href="https://pragdave.me/blog/2014/03/04/time-to-kill-agile.html#fn:2" target="_blank" rel="noreferrer">the word &amp;ldquo;Agile&amp;rdquo; has been pronounced dead by one of its authors&lt;/a> may seem like overkill, but nothing has put a stop to the software industry&amp;rsquo;s glut of &lt;a href="https://www.bmc.com/blogs/agile-certifications/" target="_blank" rel="noreferrer">Agile certifications&lt;/a>, &lt;a href="https://www.projectmanager.com/blog/what-is-a-scrum-master-everything-you-need" target="_blank" rel="noreferrer">occupations of &amp;ldquo;doing Agile&amp;rdquo;&lt;/a>, and every engineering manager I&amp;rsquo;ve ever spoken to saying &amp;ldquo;Oh, yes, we do Agile here.&amp;rdquo; I could write an entire blog post haranguing the profiteering and narcissistic industry (see Dave Thomas&amp;rsquo; post linked above), but today I want to dive deeper, take a hard look at the original document, and ask &amp;ldquo;Who actually does this?&amp;rdquo;&lt;/p></description></item></channel></rss>