<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruby on J3RN's Blog</title><link>https://j3rn.com/tags/ruby/</link><description>Recent content in Ruby on J3RN's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 13 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://j3rn.com/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Object Orientation and the Limits of Metaphor</title><link>https://j3rn.com/posts/object-orientation-limits-of-metaphor/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://j3rn.com/posts/object-orientation-limits-of-metaphor/</guid><description>&lt;p>Roughly ten years ago, I was very excited about object orientation. Which made me somewhat late to the party; glowing pronouncements of how object orientation was going to solve the software complexity crisis had flooded industry publications some two decades prior. Regardless, in 2014, I was trying to explain to a friend why objects were so grand.&lt;/p>
&lt;p>&amp;ldquo;Objects model the real world,&amp;rdquo; I said, grabbing a pencil off the table and holding it up. &amp;ldquo;For instance, I could create a Pencil class, representing the Platonic idea of Pencil, and this would be an instance of it.&amp;rdquo; I, like any modern person, did not actually subscribe to Platonism. &amp;ldquo;And it&amp;rsquo;s able to &lt;em>do&lt;/em> stuff, which we refer to as &amp;lsquo;methods&amp;rsquo;. For instance,&amp;rdquo; I said, scribbling on a piece of paper, &amp;ldquo;it might have a &amp;lsquo;write&amp;rsquo; method, for writing things.&amp;rdquo;&lt;/p></description></item><item><title>Escaping from Ruby Blocks</title><link>https://j3rn.com/posts/escaping-from-ruby-blocks/</link><pubDate>Wed, 18 Oct 2017 12:00:00 -0400</pubDate><guid>https://j3rn.com/posts/escaping-from-ruby-blocks/</guid><description>&lt;h2 id="guard-clauses" class="relative group">Guard Clauses &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#guard-clauses" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>Once upon a time, &lt;a href="http://rubocop.readthedocs.io/en/latest/cops_style/#styleguardclause" target="_blank" rel="noreferrer">Rubocop taught me to love guard clauses&lt;/a>. When I first started learning to program, I was deeply conflicted about guard clauses. On the one hand, guard clauses can prevent the need to have deeply nested &lt;code>if&lt;/code>s. On the other hand, it can be hard to remember the context deep into a method without being able to reference the enveloping &lt;code>if&lt;/code>s (similarly to RSpec contexts). In any case, Rubocop wants me to use guard clauses, so I do.&lt;/p></description></item><item><title>To Monkey Patch Ruby</title><link>https://j3rn.com/posts/to-monkey-patch-ruby/</link><pubDate>Thu, 25 Aug 2016 16:07:49 -0400</pubDate><guid>https://j3rn.com/posts/to-monkey-patch-ruby/</guid><description>&lt;p>This is the first of a series of posts I intend to write in a new &amp;ldquo;J3RN vs J3RN&amp;rdquo; style. Essentially, I will be stating a problem with two or more possible solutions, taking both sides in turn, and hopefully ultimately reaching a well thought out solution to the problem.&lt;/p>
&lt;h2 id="the-problem" class="relative group">The Problem &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#the-problem" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>For my &lt;a href="https://github.com/J3RN/timesheet" target="_blank" rel="noreferrer">Time Tracker application&lt;/a>, I want to have a pretty date and time picker. However, Ruby only natively understands a handful of formats and &amp;ldquo;&lt;a href="https://en.wikipedia.org/wiki/Date_and_time_notation_in_the_United_States" target="_blank" rel="noreferrer">American date&lt;/a>&amp;rdquo;, the format used by the pretty date and time picker, is not one of them.&lt;/p></description></item><item><title>Interpolating Ruby Strings</title><link>https://j3rn.com/posts/interpolating-ruby-strings/</link><pubDate>Fri, 19 Dec 2014 22:14:25 -0500</pubDate><guid>https://j3rn.com/posts/interpolating-ruby-strings/</guid><description>&lt;p>Let&amp;rsquo;s talk about interpolation. Sure, you probably know the Ruby string interpolation syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">arg&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#63c381">&amp;#34;world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">puts&lt;/span> &lt;span style="color:#63c381">&amp;#34;Hello &lt;/span>&lt;span style="color:#98c379">#{&lt;/span>&lt;span style="color:#c1abea">arg&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">!&amp;#34;&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">#=&amp;gt; &amp;#34;Hello world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This syntax is pretty useful. However, it has it&amp;rsquo;s limitations. Let&amp;rsquo;s say that we are generating strings that are almost the same each time, but with each, one word changes. How are you going to do this now?&lt;/p>
&lt;p>My first inclination was something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">line&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#63c381">&amp;#34;Today the weather is &lt;/span>&lt;span style="color:#d26464;font-weight:bold">\#&lt;/span>&lt;span style="color:#63c381">{ weather }&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">weather_conditions&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#63c381">&amp;#34;warm&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;cloudy&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;windy&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">].&lt;/span>&lt;span style="color:#c1abea">each&lt;/span> &lt;span style="color:#c678dd">do&lt;/span> &lt;span style="color:#c7bf54">|&lt;/span>&lt;span style="color:#c1abea">weather&lt;/span>&lt;span style="color:#c7bf54">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">weather_conditions&lt;/span>&lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#c1abea">weather&lt;/span>&lt;span style="color:#c7bf54">]&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">%r/line/i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s not hard to see why this didn&amp;rsquo;t work. Well, it occurred to me shortly thereafter that ERB might be the right way to go with this.&lt;/p></description></item></channel></rss>