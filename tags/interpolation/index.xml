<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interpolation on J3RN's Blog</title><link>http://j3rn.com/tags/interpolation/</link><description>Recent content in Interpolation on J3RN's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 19 Dec 2014 22:14:25 -0500</lastBuildDate><atom:link href="http://j3rn.com/tags/interpolation/index.xml" rel="self" type="application/rss+xml"/><item><title>Interpolating Ruby Strings</title><link>http://j3rn.com/posts/interpolating-ruby-strings/</link><pubDate>Fri, 19 Dec 2014 22:14:25 -0500</pubDate><guid>http://j3rn.com/posts/interpolating-ruby-strings/</guid><description>&lt;p>Let&amp;rsquo;s talk about interpolation. Sure, you probably know the Ruby string interpolation syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">arg&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#63c381">&amp;#34;world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">puts&lt;/span> &lt;span style="color:#63c381">&amp;#34;Hello &lt;/span>&lt;span style="color:#98c379">#{&lt;/span>&lt;span style="color:#c1abea">arg&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">!&amp;#34;&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">#=&amp;gt; &amp;#34;Hello world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This syntax is pretty useful. However, it has it&amp;rsquo;s limitations. Let&amp;rsquo;s say that we are generating strings that are almost the same each time, but with each, one word changes. How are you going to do this now?&lt;/p>
&lt;p>My first inclination was something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">line&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#63c381">&amp;#34;Today the weather is &lt;/span>&lt;span style="color:#d26464;font-weight:bold">\#&lt;/span>&lt;span style="color:#63c381">{ weather }&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">weather_conditions&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#63c381">&amp;#34;warm&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;cloudy&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;windy&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">].&lt;/span>&lt;span style="color:#c1abea">each&lt;/span> &lt;span style="color:#c678dd">do&lt;/span> &lt;span style="color:#c7bf54">|&lt;/span>&lt;span style="color:#c1abea">weather&lt;/span>&lt;span style="color:#c7bf54">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">weather_conditions&lt;/span>&lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#c1abea">weather&lt;/span>&lt;span style="color:#c7bf54">]&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">%r/line/i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s not hard to see why this didn&amp;rsquo;t work. Well, it occurred to me shortly thereafter that ERB might be the right way to go with this.&lt;/p></description></item></channel></rss>