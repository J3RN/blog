<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>interpolation on J3RN's Blog</title><link>http://j3rn.com/tags/interpolation/</link><description>Recent content in interpolation on J3RN's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 19 Dec 2014 22:14:25 -0500</lastBuildDate><atom:link href="http://j3rn.com/tags/interpolation/index.xml" rel="self" type="application/rss+xml"/><item><title>Interpolating Ruby Strings</title><link>http://j3rn.com/posts/2014-12-19-interpolating-ruby-strings/</link><pubDate>Fri, 19 Dec 2014 22:14:25 -0500</pubDate><guid>http://j3rn.com/posts/2014-12-19-interpolating-ruby-strings/</guid><description>Let&amp;rsquo;s talk about interpolation. Sure, you probably know the Ruby string interpolation syntax:
arg = &amp;#34;world&amp;#34; puts &amp;#34;Hello #{arg}!&amp;#34; #=&amp;gt; &amp;#34;Hello world!&amp;#34; This syntax is pretty useful. However, it has it&amp;rsquo;s limitations. Let&amp;rsquo;s say that we are generating strings that are almost the same each time, but with each, one word changes. How are you going to do this now?
My first inclination was something like this:
line = &amp;#34;Today the weather is \#{ weather }&amp;#34; weather_conditions = {} [&amp;#34;warm&amp;#34;, &amp;#34;cloudy&amp;#34;, &amp;#34;windy&amp;#34;].</description></item></channel></rss>